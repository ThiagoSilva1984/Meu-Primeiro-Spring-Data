package br.com.alura.springdata.service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;

import org.springframework.stereotype.Service;

import br.com.alura.springdata.orm.Cargo;
import br.com.alura.springdata.orm.UnidadeTrabalho;
import br.com.alura.springdata.repository.CargoRepository;
import br.com.alura.springdata.repository.UnidadeTrabalhoRepository;

@Service
public class CrudFuncionarioService {
	//classe para criar a lógica para inserir os valores no banco de dados
	
	private Boolean system = true;
	private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
	
	private final CargoRepository cargoRepository;
	private final UnidadeTrabalhoRepository unidadeTrabalhoRepository;
	
	public CrudFuncionarioService(CargoRepository cargoRepository, UnidadeTrabalhoRepository unidadeTrabalhoRepository) {
		this.cargoRepository = cargoRepository;
		this.unidadeTrabalhoRepository = unidadeTrabalhoRepository;
	}
	
	public void inicial(Scanner sc) {
		while(system) {
			System.out.println("\nQUAL AÇÃO DE FUNCIONARIO DESEJA EXECUTAR?");
			System.out.println("0 - Sair");
			System.out.println("1 - Cadastrar");
			System.out.println("2 - Atualizar");
			System.out.println("3 - Visualizar");
			System.out.println("4 - Deletar");
			int action = sc.nextInt();
			switch (action) {
			case 1:
				salvar(sc);
				break;
			case 2:
				atualizar(sc);
				break;
			case 3:
				visualizar();
				break;
			case 4:
				deletar(sc);
				break;
			default:
				system = false;
				break;
			}
		}
	}

	private void salvar(Scanner sc) {
		System.out.println("Nome do Funcionario:");
		String nome = sc.next();
		System.out.println("CPF:");
		String cpf = sc.next();
		System.out.println("Salario:");
		double salario = sc.nextDouble();
		System.out.println("Data de Contratação:");
		String dataContratacao = sc.next();d
		
		List<UnidadeTrabalho> unidades = unidade(sc);
		
		Funcionario funcionario = new Funcionario();
		funcionario.setNome(nome);
		funcionario.setCpf(cpf);
		funcionario.setSalario(salario);
		funcionario.setDataContratacao(LocalDate.parse(dataContratacao, formatter));
		
		
		
		System.out.println("CADASTRADO!!!");
		

		private String nome;
		private String cpf;
		private double salario;
		private LocalDate dataContratacao;
	}
	
	private List<UnidadeTrabalho> unidade(Scanner sc){
		Boolean isTrue = true;
		List<UnidadeTrabalho> unidades = new ArrayList<>();
		
		while(isTrue) {
			System.out.println("Digite o unidadeId (Para sair digite 0)");
			Integer unidadeId = sc.nextInt();
			
			if(unidadeId != 0) {
				Optional<UnidadeTrabalho> unidade = unidadeTrabalhoRepository.findById(unidadeId);
				unidades.add(unidade.get());
			} else {
				isTrue = false;
			}
		}
		return unidades;
	}
	
	private void atualizar(Scanner sc) {
		System.out.println("ID do cargo:");
		int id = sc.nextInt();
		System.out.println("Descrição atualizada do cargo:");
		String descricao = sc.next();		
		Cargo cargo = new Cargo();
		cargo.setId(id);
		cargo.setDescricao(descricao);
		cargoRepository.save(cargo);
		System.out.println("ATUALIZADO!!!");
	}
	
	private void visualizar() {
		Iterable<Cargo> cargos = cargoRepository.findAll(); //findAll() vai retornar todos os dados de cargo
		cargos.forEach(cargo -> System.out.println(cargo));
	}
	
	private void deletar(Scanner sc) {
		visualizar();
		System.out.println("ID do cargo a ser deletado:");
		int id = sc.nextInt();
		cargoRepository.deleteById(id);
		System.out.println("DELETADO!!!");
	}
	
}
	
	
	
	
	
	
